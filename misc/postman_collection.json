{
	"info": {
		"_postman_id": "9688cd3c-f600-43e9-afb5-33cf5e9ebe35",
		"name": "Hitachi-Backend-Assessment",
		"description": "A collection to hit the endpoints of Hitachi Backend Assessment API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "13905975"
	},
	"item": [
		{
			"name": "Login - Admin by Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();",
							"var jwtToken = responseBody.token;",
							"",
							"pm.environment.set(\"jwtToken\", jwtToken);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"admin@example.com\",\n    \"password\":\"admin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/login"
			},
			"response": [
				{
					"name": "Login - Admin by Email",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"admin@example.com\",\n    \"password\":\"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/login"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:04:44 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTcxMDIzNDI4NCwiZXhwIjoxNzEwMzIwNjg0fQ.yQlZRC6cB9dFUrG7W_iw59lw8bFZXnb8XmHOazV9nDtqQnQWUY6T6ZDEj0SPIFvj\",\n    \"message\": \"User login was successful\"\n}"
				}
			]
		},
		{
			"name": "Login - Admin by Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();",
							"var jwtToken = responseBody.token;",
							"",
							"pm.environment.set(\"jwtToken\", jwtToken);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"admin\",\n    \"password\":\"admin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/login"
			},
			"response": [
				{
					"name": "Login - Admin by Username",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"admin\",\n    \"password\":\"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/login"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:04:56 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTcxMDIzNDI5NiwiZXhwIjoxNzEwMzIwNjk2fQ.epLHP_d7fF_Bm2ZYThRFRldb9j2uKpE67dCZu8YbZp34IPMGHURklW1mIgPXAt_w\",\n    \"message\": \"User login was successful\"\n}"
				}
			]
		},
		{
			"name": "Login - Customer by Username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();",
							"var jwtToken = responseBody.token;",
							"",
							"pm.environment.set(\"jwtToken\", jwtToken);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"john_doe\",\n    \"password\":\"pass\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/login"
			},
			"response": [
				{
					"name": "Login - Customer by Username",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"john_doe\",\n    \"password\":\"pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/login"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:05:02 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJqb2huX2RvZSIsImlhdCI6MTcxMDIzNDMwMiwiZXhwIjoxNzEwMzIwNzAyfQ.Yj033Q8kT3OeLFVXDLprQCxtu_80Glsj6Tivyoi7FOlZAo9bUqcfLPNY2EagUF5z\",\n    \"message\": \"User login was successful\"\n}"
				}
			]
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"john_doe\",\n    \"password\":\"pass\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/logout"
			},
			"response": [
				{
					"name": "Logout",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"john_doe\",\n    \"password\":\"pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/logout"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:05:08 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "User - GetAll",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": "http://localhost:8080/user/all"
			},
			"response": [
				{
					"name": "User - GetAll",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": "http://localhost:8080/user/all"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 12:07:42 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 1,\n        \"username\": \"admin\",\n        \"email\": \"admin@example.com\",\n        \"password\": \"$2a$10$O.MvCetq0HVcZYOTqej7X.HZMfoxgYChF0nWTC7DKfcLgmvzWfDAG\",\n        \"roles\": [\n            \"ADMIN\"\n        ],\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"system\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    },\n    {\n        \"id\": 2,\n        \"username\": \"john_doe\",\n        \"email\": \"john@example.com\",\n        \"password\": \"$2a$10$YyJ7yS4qjEThMI0DW7C29.sC9Q4/Cf5ZKyRe0HXwfjsOndHhN2G7S\",\n        \"roles\": [\n            \"CUSTOMER\"\n        ],\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"system\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    },\n    {\n        \"id\": 3,\n        \"username\": \"jane_smith\",\n        \"email\": \"jane@example.com\",\n        \"password\": \"$2a$10$YyJ7yS4qjEThMI0DW7C29.sC9Q4/Cf5ZKyRe0HXwfjsOndHhN2G7S\",\n        \"roles\": [\n            \"CUSTOMER\"\n        ],\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"system\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    },\n    {\n        \"id\": 4,\n        \"username\": \"michael_johnson\",\n        \"email\": \"michael@example.com\",\n        \"password\": \"$2a$10$YyJ7yS4qjEThMI0DW7C29.sC9Q4/Cf5ZKyRe0HXwfjsOndHhN2G7S\",\n        \"roles\": [\n            \"CUSTOMER\"\n        ],\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"system\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    },\n    {\n        \"id\": 5,\n        \"username\": \"emily_brown\",\n        \"email\": \"emily@example.com\",\n        \"password\": \"$2a$10$YyJ7yS4qjEThMI0DW7C29.sC9Q4/Cf5ZKyRe0HXwfjsOndHhN2G7S\",\n        \"roles\": [\n            \"CUSTOMER\"\n        ],\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"system\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    }\n]"
				},
				{
					"name": "[Unauthorized] User - GetAll",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": "http://localhost:8080/user/all"
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 12:08:11 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "User - Get",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/user?userId=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "2"
						}
					]
				}
			},
			"response": [
				{
					"name": "User - Get",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/user?userId=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 12:07:26 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 2,\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"$2a$10$YyJ7yS4qjEThMI0DW7C29.sC9Q4/Cf5ZKyRe0HXwfjsOndHhN2G7S\",\n    \"roles\": [\n        \"CUSTOMER\"\n    ],\n    \"createdAt\": \"2024-03-12\",\n    \"createdBy\": \"system\",\n    \"updatedAt\": null,\n    \"updatedBy\": null,\n    \"dataStatus\": \"A\"\n}"
				}
			]
		},
		{
			"name": "User - Add",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"hansel\",\n    \"email\":\"hansel@example.com\",\n    \"password\": \"hansel\",\n    \"roles\": [\n        \"ADMIN\",\n        \"CUSTOMER\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/user"
			},
			"response": [
				{
					"name": "User - Add",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"hansel\",\n    \"email\":\"hansel@example.com\",\n    \"password\": \"hansel\",\n    \"roles\": [\n        \"ADMIN\",\n        \"CUSTOMER\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/user"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:27:54 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 6,\n    \"username\": \"hansel\",\n    \"email\": \"hansel@example.com\",\n    \"password\": \"$2a$10$dC70duJHkES1NEGCI49sI.slxOwImdVOSGcSZxN.96Net/OGKekS2\",\n    \"roles\": [\n        \"ADMIN\",\n        \"CUSTOMER\"\n    ],\n    \"createdAt\": \"2024-03-12\",\n    \"createdBy\": \"admin\",\n    \"updatedAt\": null,\n    \"updatedBy\": null,\n    \"dataStatus\": \"A\"\n}"
				},
				{
					"name": "[User already exists] User - Add",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"email\":\"john2@example.com\",\n    \"password\": \"hansel\",\n    \"roles\": [\n        \"ADMIN\",\n        \"CUSTOMER\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/user"
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:42:52 GMT"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-03-12T09:42:52.690+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"java.lang.RuntimeException: User already exist\\n\\tat com.hitachi.backend.assessment.user.UserService.validateNewUser(UserService.java:43)\\n\\tat com.hitachi.backend.assessment.user.UserService.addUser(UserService.java:57)\\n\\tat com.hitachi.backend.assessment.user.UserController.addUser(UserController.java:32)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:887)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)\\n\\tat org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)\\n\\tat org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat com.hitachi.backend.assessment.auth.JwtAuthFilter.doFilterInternal(JwtAuthFilter.java:60)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)\\n\\tat org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\n\\tat java.base/java.lang.Thread.run(Thread.java:840)\\n\",\n    \"message\": \"User already exist\",\n    \"path\": \"/user\"\n}"
				}
			]
		},
		{
			"name": "User - Edit",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"hansel\",\n    \"email\":\"hansel2@example.com\",\n    \"password\": \"pass123\",\n    \"roles\": [\n        \"CUSTOMER\",\n        \"ADMIN\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user?userId=6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "6"
						}
					]
				}
			},
			"response": [
				{
					"name": "User - Edit",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"hansel\",\n    \"email\":\"hansel2@example.com\",\n    \"password\": \"pass123\",\n    \"roles\": [\n        \"CUSTOMER\",\n        \"ADMIN\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user?userId=6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:39:04 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 6,\n    \"username\": \"hansel\",\n    \"email\": \"hansel2@example.com\",\n    \"password\": \"$2a$10$tSZ.N/rdlezm9Acy8LR.iOXq8W.7WsUxOYk3WAqal8S6kpEgJmsHu\",\n    \"roles\": [\n        \"CUSTOMER\",\n        \"ADMIN\"\n    ],\n    \"createdAt\": \"2024-03-12\",\n    \"createdBy\": \"admin\",\n    \"updatedAt\": \"2024-03-12\",\n    \"updatedBy\": \"admin\",\n    \"dataStatus\": \"A\"\n}"
				},
				{
					"name": "[Email already taken] User - Edit",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"hansel\",\n    \"email\":\"admin@example.com\",\n    \"password\": \"pass\",\n    \"roles\": [\n        \"CUSTOMER\",\n        \"ADMIN\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user?userId=6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:29:53 GMT"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-03-12T09:29:53.675+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"java.lang.RuntimeException: User already exist\\n\\tat com.hitachi.backend.assessment.user.UserService.validateNewUser(UserService.java:43)\\n\\tat com.hitachi.backend.assessment.user.UserService.editUser(UserService.java:72)\\n\\tat com.hitachi.backend.assessment.user.UserController.editUser(UserController.java:39)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:887)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)\\n\\tat org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)\\n\\tat org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat com.hitachi.backend.assessment.auth.JwtAuthFilter.doFilterInternal(JwtAuthFilter.java:60)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)\\n\\tat org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\n\\tat java.base/java.lang.Thread.run(Thread.java:840)\\n\",\n    \"message\": \"User already exist\",\n    \"path\": \"/user\"\n}"
				}
			]
		},
		{
			"name": "User - Delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/user?userId=6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "6"
						}
					]
				}
			},
			"response": [
				{
					"name": "User - Delete",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/user?userId=6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "26"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:41:29 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "User successfully deleted!"
				},
				{
					"name": "[User not Found] User - Delete",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/user?userId=7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "7"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:41:38 GMT"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-03-12T09:41:38.688+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"java.lang.RuntimeException: User not found!\\n\\tat com.hitachi.backend.assessment.user.UserService.lambda$getUserById$1(UserService.java:32)\\n\\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\\n\\tat com.hitachi.backend.assessment.user.UserService.getUserById(UserService.java:31)\\n\\tat com.hitachi.backend.assessment.user.UserService.deleteUser(UserService.java:85)\\n\\tat com.hitachi.backend.assessment.user.UserController.deleteCustomer(UserController.java:45)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:887)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\n\\tat org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)\\n\\tat org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)\\n\\tat org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat com.hitachi.backend.assessment.auth.JwtAuthFilter.doFilterInternal(JwtAuthFilter.java:60)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)\\n\\tat org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\n\\tat java.base/java.lang.Thread.run(Thread.java:840)\\n\",\n    \"message\": \"User not found!\",\n    \"path\": \"/user\"\n}"
				}
			]
		},
		{
			"name": "Profile - Get",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": "http://localhost:8080/profile"
			},
			"response": [
				{
					"name": "Profile - GetSelf",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "http://localhost:8080/profile"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:46:00 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"john_doe\",\n    \"displayName\": \"John Doe\",\n    \"birthdate\": \"2002-05-04T17:00:00.000+00:00\",\n    \"birthplace\": \"Los Angeles\"\n}"
				}
			]
		},
		{
			"name": "Profile - Edit",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"displayName\": \"John Doe\",\n    \"birthdate\": \"2000-05-04T17:00:00.000+00:00\",\n    \"birthplace\": \"Jakarta\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/profile"
			},
			"response": [
				{
					"name": "Profile - Edit",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"John Doe\",\n    \"birthdate\": \"2000-05-04T17:00:00.000+00:00\",\n    \"birthplace\": \"Jakarta\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/profile"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:46:34 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"john_doe\",\n    \"displayName\": \"John Doe\",\n    \"birthdate\": \"2000-05-04T17:00:00.000+00:00\",\n    \"birthplace\": \"Jakarta\"\n}"
				}
			]
		},
		{
			"name": "Product - GetAll",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/product/all"
			},
			"response": [
				{
					"name": "Product - GetAll",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/product/all"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 12:08:44 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Television\",\n        \"price\": 300,\n        \"tax\": 0.1\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Refrigerator\",\n        \"price\": 200,\n        \"tax\": 0.15\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Washing Machine\",\n        \"price\": 250,\n        \"tax\": 0.2\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Fan\",\n        \"price\": 100,\n        \"tax\": 0\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Microwave\",\n        \"price\": 150,\n        \"tax\": 0.1\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Air Conditioner\",\n        \"price\": 400,\n        \"tax\": 0.15\n    },\n    {\n        \"id\": 7,\n        \"name\": \"Blender\",\n        \"price\": 50,\n        \"tax\": 0.05\n    }\n]"
				}
			]
		},
		{
			"name": "Product - Get",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/product?productId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product"
					],
					"query": [
						{
							"key": "productId",
							"value": "1"
						}
					]
				}
			},
			"response": [
				{
					"name": "Product - Get",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/product?productId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "1"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 12:09:18 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 1,\n    \"name\": \"Television\",\n    \"price\": 300,\n    \"tax\": 0.1\n}"
				}
			]
		},
		{
			"name": "Product - Add",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Vaccuum Cleaner\",\n    \"price\": 160.0,\n    \"tax\": 0.1\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/product"
			},
			"response": [
				{
					"name": "Product - Add",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vaccuum Cleaner\",\n    \"price\": 160.0,\n    \"tax\": 0.1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/product"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:48:20 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 8,\n    \"name\": \"Vaccuum Cleaner\",\n    \"price\": 160,\n    \"tax\": 0.1\n}"
				}
			]
		},
		{
			"name": "Product - Edit",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Vaccuum Cleaner\",\n    \"price\": 200.0,\n    \"tax\": 0.3\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/product?productId=8",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product"
					],
					"query": [
						{
							"key": "productId",
							"value": "8"
						}
					]
				}
			},
			"response": [
				{
					"name": "Product - Edit",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vaccuum Cleaner\",\n    \"price\": 200.0,\n    \"tax\": 0.3\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/product?productId=8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "8"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:48:48 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 8,\n    \"name\": \"Vaccuum Cleaner\",\n    \"price\": 200,\n    \"tax\": 0.3\n}"
				}
			]
		},
		{
			"name": "Product - Delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/product?productId=8",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product"
					],
					"query": [
						{
							"key": "productId",
							"value": "8"
						}
					]
				}
			},
			"response": [
				{
					"name": "Product - Delete",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/product?productId=8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "8"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "29"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:49:03 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "Product successfully deleted!"
				}
			]
		},
		{
			"name": "Transaction - Get All",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": "http://localhost:8080/transaction"
			},
			"response": [
				{
					"name": "Transaction - Get All",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": "http://localhost:8080/transaction"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:51:42 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 4,\n        \"username\": \"michael_johnson\",\n        \"transactionTime\": \"2024-03-13\",\n        \"details\": [\n            {\n                \"productName\": \"Refrigerator\",\n                \"productPrice\": 200,\n                \"quantity\": 4,\n                \"totalPrice\": 800\n            }\n        ],\n        \"paymentMethod\": \"DEBIT\",\n        \"paymentStatus\": \"NOT_PAID\",\n        \"netPaid\": 800,\n        \"taxPaid\": 120,\n        \"totalPaid\": 919.9999999999999,\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"admin\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    },\n    {\n        \"id\": 3,\n        \"username\": \"john_doe\",\n        \"transactionTime\": \"2024-03-12\",\n        \"details\": [\n            {\n                \"productName\": \"Television\",\n                \"productPrice\": 300,\n                \"quantity\": 2,\n                \"totalPrice\": 600\n            },\n            {\n                \"productName\": \"Washing Machine\",\n                \"productPrice\": 250,\n                \"quantity\": 1,\n                \"totalPrice\": 250\n            }\n        ],\n        \"paymentMethod\": \"CASH\",\n        \"paymentStatus\": \"PAID\",\n        \"netPaid\": 850,\n        \"taxPaid\": 110,\n        \"totalPaid\": 960,\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"admin\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    },\n    {\n        \"id\": 2,\n        \"username\": \"john_doe\",\n        \"transactionTime\": \"2024-03-11\",\n        \"details\": [\n            {\n                \"productName\": \"Washing Machine\",\n                \"productPrice\": 250,\n                \"quantity\": 2,\n                \"totalPrice\": 500\n            }\n        ],\n        \"paymentMethod\": \"CREDIT\",\n        \"paymentStatus\": \"PAID\",\n        \"netPaid\": 500,\n        \"taxPaid\": 100,\n        \"totalPaid\": 600,\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"admin\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    },\n    {\n        \"id\": 1,\n        \"username\": \"admin\",\n        \"transactionTime\": \"2024-03-10\",\n        \"details\": [\n            {\n                \"productName\": \"Refrigerator\",\n                \"productPrice\": 200,\n                \"quantity\": 5,\n                \"totalPrice\": 1000\n            },\n            {\n                \"productName\": \"Television\",\n                \"productPrice\": 300,\n                \"quantity\": 3,\n                \"totalPrice\": 900\n            }\n        ],\n        \"paymentMethod\": \"CASH\",\n        \"paymentStatus\": \"CANCELLED\",\n        \"netPaid\": 1900,\n        \"taxPaid\": 240,\n        \"totalPaid\": 2140,\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"admin\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    }\n]"
				}
			]
		},
		{
			"name": "Transaction - Get with Filters",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/transaction?sortType=oldest&customerName=john_doe&startDate=2024-03-09&endDate=2024-03-14&paymentMethod=CASH&paymentStatus=PAID&createdBy=admin&orderType=oldest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction"
					],
					"query": [
						{
							"key": "sortType",
							"value": "oldest"
						},
						{
							"key": "customerName",
							"value": "john_doe"
						},
						{
							"key": "startDate",
							"value": "2024-03-09"
						},
						{
							"key": "endDate",
							"value": "2024-03-14"
						},
						{
							"key": "paymentMethod",
							"value": "CASH"
						},
						{
							"key": "paymentStatus",
							"value": "PAID"
						},
						{
							"key": "createdBy",
							"value": "admin"
						},
						{
							"key": "orderType",
							"value": "oldest"
						}
					]
				}
			},
			"response": [
				{
					"name": "Transaction - Get with Filters",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/transaction?sortType=oldest&customerName=john_doe&startDate=2024-03-09&endDate=2024-03-14&paymentMethod=CASH&paymentStatus=PAID&createdBy=admin&orderType=oldest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transaction"
							],
							"query": [
								{
									"key": "sortType",
									"value": "oldest"
								},
								{
									"key": "customerName",
									"value": "john_doe"
								},
								{
									"key": "startDate",
									"value": "2024-03-09"
								},
								{
									"key": "endDate",
									"value": "2024-03-14"
								},
								{
									"key": "paymentMethod",
									"value": "CASH"
								},
								{
									"key": "paymentStatus",
									"value": "PAID"
								},
								{
									"key": "createdBy",
									"value": "admin"
								},
								{
									"key": "orderType",
									"value": "oldest"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:52:26 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 3,\n        \"username\": \"john_doe\",\n        \"transactionTime\": \"2024-03-12\",\n        \"details\": [\n            {\n                \"productName\": \"Television\",\n                \"productPrice\": 300,\n                \"quantity\": 2,\n                \"totalPrice\": 600\n            },\n            {\n                \"productName\": \"Washing Machine\",\n                \"productPrice\": 250,\n                \"quantity\": 1,\n                \"totalPrice\": 250\n            }\n        ],\n        \"paymentMethod\": \"CASH\",\n        \"paymentStatus\": \"PAID\",\n        \"netPaid\": 850,\n        \"taxPaid\": 110,\n        \"totalPaid\": 960,\n        \"createdAt\": \"2024-03-12\",\n        \"createdBy\": \"admin\",\n        \"updatedAt\": null,\n        \"updatedBy\": null,\n        \"dataStatus\": \"A\"\n    }\n]"
				}
			]
		},
		{
			"name": "Transaction - Add",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customerId\": 3,\n    \"transactionTime\": \"2024-03-10\",\n    \"details\": [\n        {\n            \"productId\": 2,\n            \"quantity\": 2\n        },\n        {\n            \"productId\": 3,\n            \"quantity\": 3\n        }\n    ],\n    \"paymentMethod\": \"CASH\",\n    \"paymentStatus\": \"NOT_PAID\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/transaction",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction"
					],
					"query": [
						{
							"key": "customer",
							"value": "admin",
							"disabled": true
						}
					]
				}
			},
			"response": [
				{
					"name": "Transaction - Add",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerId\": 3,\n    \"transactionTime\": \"2024-03-10\",\n    \"details\": [\n        {\n            \"productId\": 2,\n            \"quantity\": 2\n        },\n        {\n            \"productId\": 3,\n            \"quantity\": 3\n        }\n    ],\n    \"paymentMethod\": \"CASH\",\n    \"paymentStatus\": \"NOT_PAID\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/transaction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transaction"
							],
							"query": [
								{
									"key": "customer",
									"value": "admin",
									"disabled": true
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:53:45 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 5,\n    \"username\": \"jane_smith\",\n    \"transactionTime\": \"2024-03-10\",\n    \"details\": [\n        {\n            \"productName\": \"Refrigerator\",\n            \"productPrice\": 200,\n            \"quantity\": 2,\n            \"totalPrice\": 400\n        },\n        {\n            \"productName\": \"Washing Machine\",\n            \"productPrice\": 250,\n            \"quantity\": 3,\n            \"totalPrice\": 750\n        }\n    ],\n    \"paymentMethod\": \"CASH\",\n    \"paymentStatus\": \"NOT_PAID\",\n    \"netPaid\": 1150,\n    \"taxPaid\": 210,\n    \"totalPaid\": 1360,\n    \"createdAt\": \"2024-03-12\",\n    \"createdBy\": \"admin\",\n    \"updatedAt\": null,\n    \"updatedBy\": null,\n    \"dataStatus\": \"A\"\n}"
				}
			]
		},
		{
			"name": "Transaction - Edit",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"customerId\": 1,\n    \"transactionTime\": \"2024-03-10\",\n    \"details\": [\n        {\n            \"productId\": 5,\n            \"quantity\": 1\n        },\n        {\n            \"productId\": 4,\n            \"quantity\": 1\n        }\n    ],\n    \"paymentMethod\": \"CREDIT\",\n    \"paymentStatus\": \"CANCELLED\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/transaction?transactionId=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction"
					],
					"query": [
						{
							"key": "transactionId",
							"value": "5"
						}
					]
				}
			},
			"response": [
				{
					"name": "Transaction - Edit",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerId\": 1,\n    \"transactionTime\": \"2024-03-10\",\n    \"details\": [\n        {\n            \"productId\": 5,\n            \"quantity\": 1\n        },\n        {\n            \"productId\": 4,\n            \"quantity\": 1\n        }\n    ],\n    \"paymentMethod\": \"CREDIT\",\n    \"paymentStatus\": \"CANCELLED\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/transaction?transactionId=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transaction"
							],
							"query": [
								{
									"key": "transactionId",
									"value": "5"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:54:40 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 5,\n    \"username\": \"admin\",\n    \"transactionTime\": \"2024-03-10\",\n    \"details\": [\n        {\n            \"productName\": \"Microwave\",\n            \"productPrice\": 150,\n            \"quantity\": 1,\n            \"totalPrice\": 150\n        },\n        {\n            \"productName\": \"Fan\",\n            \"productPrice\": 100,\n            \"quantity\": 1,\n            \"totalPrice\": 100\n        }\n    ],\n    \"paymentMethod\": \"CREDIT\",\n    \"paymentStatus\": \"CANCELLED\",\n    \"netPaid\": 250,\n    \"taxPaid\": 15,\n    \"totalPaid\": 265,\n    \"createdAt\": \"2024-03-12\",\n    \"createdBy\": \"admin\",\n    \"updatedAt\": \"2024-03-12\",\n    \"updatedBy\": \"admin\",\n    \"dataStatus\": \"A\"\n}"
				}
			]
		},
		{
			"name": "Transaction - Delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/transaction?transactionId=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction"
					],
					"query": [
						{
							"key": "transactionId",
							"value": "5"
						}
					]
				}
			},
			"response": [
				{
					"name": "Transaction - Delete",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/transaction?transactionId=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transaction"
							],
							"query": [
								{
									"key": "transactionId",
									"value": "5"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "33"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:55:27 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "Transaction successfully deleted!"
				}
			]
		},
		{
			"name": "Report - Date Range",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/report/date?startDate=2024-03-11&endDate=2024-03-11",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"report",
						"date"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2024-03-11"
						},
						{
							"key": "endDate",
							"value": "2024-03-11"
						}
					]
				}
			},
			"response": [
				{
					"name": "Report - Date Range",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/report/date?startDate=2024-03-11&endDate=2024-03-11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"report",
								"date"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-03-11"
								},
								{
									"key": "endDate",
									"value": "2024-03-11"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:56:16 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"john_doe\",\n    \"grandNetPaid\": 500,\n    \"grandTaxPaid\": 100,\n    \"grandTotalPaid\": 600,\n    \"reports\": [\n        {\n            \"time\": \"2024-03-11\",\n            \"netPaid\": 500,\n            \"taxPaid\": 100,\n            \"totalPaid\": 600\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Report - Date All",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": "http://localhost:8080/report/date"
			},
			"response": [
				{
					"name": "Report - Date All",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": "http://localhost:8080/report/date"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:56:37 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"john_doe\",\n    \"grandNetPaid\": 1350,\n    \"grandTaxPaid\": 210,\n    \"grandTotalPaid\": 1560,\n    \"reports\": [\n        {\n            \"time\": \"2024-03-11\",\n            \"netPaid\": 500,\n            \"taxPaid\": 100,\n            \"totalPaid\": 600\n        },\n        {\n            \"time\": \"2024-03-12\",\n            \"netPaid\": 850,\n            \"taxPaid\": 110,\n            \"totalPaid\": 960\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Report - Product Range",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/report/product?customerName=admin&startDate=2024-03-10&endDate=2024-03-11",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"report",
						"product"
					],
					"query": [
						{
							"key": "customerName",
							"value": "admin"
						},
						{
							"key": "startDate",
							"value": "2024-03-10"
						},
						{
							"key": "endDate",
							"value": "2024-03-11"
						}
					]
				}
			},
			"response": [
				{
					"name": "Report - Product Range",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/report/product?customerName=admin&startDate=2024-03-10&endDate=2024-03-11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"report",
								"product"
							],
							"query": [
								{
									"key": "customerName",
									"value": "admin"
								},
								{
									"key": "startDate",
									"value": "2024-03-10"
								},
								{
									"key": "endDate",
									"value": "2024-03-11"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 09:57:55 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"john_doe\",\n    \"grandNetPaid\": 500,\n    \"grandTaxPaid\": 100,\n    \"grandTotalPaid\": 600,\n    \"reports\": [\n        {\n            \"productName\": \"Washing Machine\",\n            \"netPaid\": 500,\n            \"taxPaid\": 100,\n            \"totalPaid\": 600\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Report - Product All",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{jwtToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "customer",
						"value": "admin",
						"type": "text",
						"disabled": true
					}
				],
				"url": "http://localhost:8080/report/date"
			},
			"response": [
				{
					"name": "Report - Product All",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "customer",
								"value": "admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": "http://localhost:8080/report/date"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Mar 2024 10:00:02 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"john_doe\",\n    \"grandNetPaid\": 1350,\n    \"grandTaxPaid\": 210,\n    \"grandTotalPaid\": 1560,\n    \"reports\": [\n        {\n            \"time\": \"2024-03-11\",\n            \"netPaid\": 500,\n            \"taxPaid\": 100,\n            \"totalPaid\": 600\n        },\n        {\n            \"time\": \"2024-03-12\",\n            \"netPaid\": 850,\n            \"taxPaid\": 110,\n            \"totalPaid\": 960\n        }\n    ]\n}"
				}
			]
		}
	]
}